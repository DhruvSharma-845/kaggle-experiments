{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":13226747,"sourceType":"datasetVersion","datasetId":8383899}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:44:13.043851Z","iopub.execute_input":"2025-10-02T15:44:13.045032Z","iopub.status.idle":"2025-10-02T15:44:27.521497Z","shell.execute_reply.started":"2025-10-02T15:44:13.044979Z","shell.execute_reply":"2025-10-02T15:44:27.520419Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/celeba/celeba/list_eval_partition.txt\n/kaggle/input/celeba/celeba/list_bbox_celeba.txt\n/kaggle/input/celeba/celeba/identity_CelebA.txt\n/kaggle/input/celeba/celeba/list_landmarks_align_celeba.txt\n/kaggle/input/celeba/celeba/list_landmarks_celeba.txt\n/kaggle/input/celeba/celeba/list_attr_celeba.txt\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_36/1229163428.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mdirname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilenames\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwalk\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/kaggle/input'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mfilename\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfilenames\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdirname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/os.py\u001b[0m in \u001b[0;36m_walk\u001b[0;34m(top, topdown, onerror, followlinks)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/os.py\u001b[0m in \u001b[0;36m_walk\u001b[0;34m(top, topdown, onerror, followlinks)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/os.py\u001b[0m in \u001b[0;36m_walk\u001b[0;34m(top, topdown, onerror, followlinks)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/os.py\u001b[0m in \u001b[0;36m_walk\u001b[0;34m(top, topdown, onerror, followlinks)\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/os.py\u001b[0m in \u001b[0;36m_walk\u001b[0;34m(top, topdown, onerror, followlinks)\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}],"execution_count":18},{"cell_type":"code","source":"print(os.listdir('/kaggle/input'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:48:59.432118Z","iopub.execute_input":"2025-10-02T15:48:59.432782Z","iopub.status.idle":"2025-10-02T15:49:05.226261Z","shell.execute_reply.started":"2025-10-02T15:48:59.432745Z","shell.execute_reply":"2025-10-02T15:49:05.225506Z"}},"outputs":[{"name":"stdout","text":"['celeba']\n/bin/bash: line 1: /usr/bin/mv: Argument list too long\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"import shutil\nimport os\n\nshutil.copytree(\"/kaggle/input/celeba\", \"/kaggle/working/celeba_dataset\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:56:47.735516Z","iopub.execute_input":"2025-10-02T15:56:47.736264Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from os.path import join\nfrom os import listdir, rmdir\nfrom shutil import move\n\nroot = '/kaggle/working/celeba_dataset/celeba/img_align_celeba'\nfor filename in listdir(join(root, 'img_align_celeba')):\n    move(join(root, 'img_align_celeba', filename), join(root, filename))\nrmdir(join(root, 'img_align_celeba'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:12:41.612236Z","iopub.execute_input":"2025-10-02T16:12:41.612735Z","iopub.status.idle":"2025-10-02T16:12:49.365763Z","shell.execute_reply.started":"2025-10-02T16:12:41.612711Z","shell.execute_reply":"2025-10-02T16:12:49.365133Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"# Loading Dataset","metadata":{}},{"cell_type":"code","source":"import torchvision\nfrom torch.utils.data import DataLoader","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:14:39.449362Z","iopub.execute_input":"2025-10-02T16:14:39.449666Z","iopub.status.idle":"2025-10-02T16:14:39.453168Z","shell.execute_reply.started":"2025-10-02T16:14:39.449643Z","shell.execute_reply":"2025-10-02T16:14:39.452436Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"image_path = '/kaggle/working/celeba_dataset'","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:14:50.546829Z","iopub.execute_input":"2025-10-02T16:14:50.547508Z","iopub.status.idle":"2025-10-02T16:14:50.550876Z","shell.execute_reply.started":"2025-10-02T16:14:50.547482Z","shell.execute_reply":"2025-10-02T16:14:50.550146Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"import torchvision.transforms as transforms\ntransform_train = transforms.Compose([\n    transforms.RandomCrop([178, 178]),\n    transforms.RandomHorizontalFlip(),\n    transforms.Resize([64, 64]),\n    transforms.ToTensor(),\n])\n\ntransform = transforms.Compose([\n    transforms.CenterCrop([178, 178]),\n    transforms.Resize([64, 64]),\n    transforms.ToTensor(),\n])\n\nget_smile = lambda attr: attr[31]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:14:52.634245Z","iopub.execute_input":"2025-10-02T16:14:52.635158Z","iopub.status.idle":"2025-10-02T16:14:52.640151Z","shell.execute_reply.started":"2025-10-02T16:14:52.635131Z","shell.execute_reply":"2025-10-02T16:14:52.639457Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"celeba_train_dataset = torchvision.datasets.CelebA(image_path, split='train', target_type='attr', download=False, transform=transform_train, target_transform=get_smile)\nceleba_valid_dataset = torchvision.datasets.CelebA(image_path, split='valid', target_type='attr', download=False, transform=transform, target_transform=get_smile)\nceleba_test_dataset = torchvision.datasets.CelebA(image_path, split='test', target_type='attr', download=False, transform=transform, target_transform=get_smile)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:14:55.202273Z","iopub.execute_input":"2025-10-02T16:14:55.202519Z","iopub.status.idle":"2025-10-02T16:15:31.924735Z","shell.execute_reply.started":"2025-10-02T16:14:55.202503Z","shell.execute_reply":"2025-10-02T16:15:31.924098Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"print(f\"{len(celeba_train_dataset)}, {len(celeba_valid_dataset)}, {len(celeba_test_dataset)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:16:27.338020Z","iopub.execute_input":"2025-10-02T16:16:27.338304Z","iopub.status.idle":"2025-10-02T16:16:27.343236Z","shell.execute_reply.started":"2025-10-02T16:16:27.338282Z","shell.execute_reply":"2025-10-02T16:16:27.342513Z"}},"outputs":[{"name":"stdout","text":"162770, 19867, 19962\n","output_type":"stream"}],"execution_count":33},{"cell_type":"code","source":"import torch","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:16:29.982520Z","iopub.execute_input":"2025-10-02T16:16:29.983233Z","iopub.status.idle":"2025-10-02T16:16:29.986323Z","shell.execute_reply.started":"2025-10-02T16:16:29.983210Z","shell.execute_reply":"2025-10-02T16:16:29.985638Z"}},"outputs":[],"execution_count":34},{"cell_type":"code","source":"batch_size = 32\ntorch.manual_seed(1)\ntrain_dl = DataLoader(celeba_train_dataset, batch_size, shuffle=True)\nvalid_dl = DataLoader(celeba_valid_dataset, batch_size, shuffle=False)\ntest_dl = DataLoader(celeba_test_dataset, batch_size, shuffle=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:16:32.882088Z","iopub.execute_input":"2025-10-02T16:16:32.882355Z","iopub.status.idle":"2025-10-02T16:16:32.897704Z","shell.execute_reply.started":"2025-10-02T16:16:32.882334Z","shell.execute_reply":"2025-10-02T16:16:32.896973Z"}},"outputs":[],"execution_count":35},{"cell_type":"markdown","source":"# Defining model","metadata":{}},{"cell_type":"code","source":"\nimport torch.nn as nn\n\nmodel = nn.Sequential()\nmodel.add_module('conv1', nn.Conv2d(in_channels=3, out_channels=32, kernel_size=3, padding=1))\nmodel.add_module('relu1', nn.ReLU())\nmodel.add_module('pool1', nn.MaxPool2d(kernel_size=2))\nmodel.add_module('dropout1', nn.Dropout(p=0.5))\n\nmodel.add_module('conv2', nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, padding=1))\nmodel.add_module('relu2', nn.ReLU())\nmodel.add_module('pool2', nn.MaxPool2d(kernel_size=2))\nmodel.add_module('dropout2', nn.Dropout(p=0.5))\n\nmodel.add_module('conv3', nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, padding=1))\nmodel.add_module('relu3', nn.ReLU())\nmodel.add_module('pool3', nn.MaxPool2d(kernel_size=2))\n\nmodel.add_module('conv4', nn.Conv2d(in_channels=128, out_channels=256, kernel_size=3, padding=1))\nmodel.add_module('relu4', nn.ReLU())\n\nmodel.add_module('pool4', nn.AvgPool2d(kernel_size=8))\nmodel.add_module('flatten', nn.Flatten())\n\nmodel.add_module('fc', nn.Linear(256, 1))\nmodel.add_module('sigmoid', nn.Sigmoid())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:17:22.228186Z","iopub.execute_input":"2025-10-02T16:17:22.228437Z","iopub.status.idle":"2025-10-02T16:17:22.242395Z","shell.execute_reply.started":"2025-10-02T16:17:22.228411Z","shell.execute_reply":"2025-10-02T16:17:22.241710Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"x = torch.ones((4, 3, 64, 64))\nprint(model(x).shape)\nprint(model)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:17:25.380906Z","iopub.execute_input":"2025-10-02T16:17:25.381170Z","iopub.status.idle":"2025-10-02T16:17:25.399772Z","shell.execute_reply.started":"2025-10-02T16:17:25.381148Z","shell.execute_reply":"2025-10-02T16:17:25.399129Z"}},"outputs":[{"name":"stdout","text":"torch.Size([4, 1])\nSequential(\n  (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (relu1): ReLU()\n  (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (dropout1): Dropout(p=0.5, inplace=False)\n  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (relu2): ReLU()\n  (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (dropout2): Dropout(p=0.5, inplace=False)\n  (conv3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (relu3): ReLU()\n  (pool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n  (conv4): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (relu4): ReLU()\n  (pool4): AvgPool2d(kernel_size=8, stride=8, padding=0)\n  (flatten): Flatten(start_dim=1, end_dim=-1)\n  (fc): Linear(in_features=256, out_features=1, bias=True)\n  (sigmoid): Sigmoid()\n)\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:17:27.976984Z","iopub.execute_input":"2025-10-02T16:17:27.977270Z","iopub.status.idle":"2025-10-02T16:17:27.981926Z","shell.execute_reply.started":"2025-10-02T16:17:27.977248Z","shell.execute_reply":"2025-10-02T16:17:27.981148Z"}},"outputs":[{"name":"stdout","text":"cuda\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"loss_fn = nn.BCELoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:17:29.661535Z","iopub.execute_input":"2025-10-02T16:17:29.662309Z","iopub.status.idle":"2025-10-02T16:17:29.667391Z","shell.execute_reply.started":"2025-10-02T16:17:29.662278Z","shell.execute_reply":"2025-10-02T16:17:29.666725Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"model.to(device)\n\ndef train(model, num_epochs, train_dl, valid_dl):\n    accuracy_hist_train = [0] * num_epochs\n    accuracy_hist_valid = [0] * num_epochs\n    \n    for epoch in range(num_epochs):\n        model.train()\n        for train_X_batch, train_y_batch in train_dl:\n            train_y_batch = train_y_batch.to(device)\n            pred_y = model(train_X_batch.to(device))[:, 0]\n            loss = loss_fn(pred_y, train_y_batch.float())\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n            is_correct = ((pred_y >= 0.5).float() == train_y_batch).float()\n            accuracy_hist_train[epoch] += is_correct.sum()\n        \n        accuracy_hist_train[epoch] /= len(train_dl.dataset)\n\n        model.eval()\n        with torch.no_grad():\n            for x_batch, y_batch in valid_dl:\n                y_batch = y_batch.to(device)\n                pred = model(x_batch.to(device))[:, 0]\n                loss = loss_fn(pred, y_batch.float())\n                is_correct = ((pred >= 0.5).float() == y_batch).float()\n                accuracy_hist_valid[epoch] += is_correct.sum()\n            \n            accuracy_hist_valid[epoch] /= len(valid_dl.dataset)\n\n        print(f'Epoch {epoch+1} accuracy: {accuracy_hist_train[epoch]:.4f} val_accuracy: {accuracy_hist_valid[epoch]:.4f}')\n\n    return accuracy_hist_train, accuracy_hist_valid","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:25:41.594765Z","iopub.execute_input":"2025-10-02T16:25:41.595007Z","iopub.status.idle":"2025-10-02T16:25:41.602625Z","shell.execute_reply.started":"2025-10-02T16:25:41.594990Z","shell.execute_reply":"2025-10-02T16:25:41.602034Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"torch.manual_seed(1)\nnum_epochs = 15\nhist = train(model, num_epochs, train_dl, valid_dl)\nprint(hist)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T16:25:44.355347Z","iopub.execute_input":"2025-10-02T16:25:44.356053Z","iopub.status.idle":"2025-10-02T17:13:59.948792Z","shell.execute_reply.started":"2025-10-02T16:25:44.356029Z","shell.execute_reply":"2025-10-02T17:13:59.948006Z"}},"outputs":[{"name":"stdout","text":"Epoch 2 accuracy: 0.8880 val_accuracy: 0.9079\nEpoch 3 accuracy: 0.8929 val_accuracy: 0.9114\nEpoch 4 accuracy: 0.8963 val_accuracy: 0.9157\nEpoch 5 accuracy: 0.8973 val_accuracy: 0.9176\nEpoch 6 accuracy: 0.8995 val_accuracy: 0.9169\nEpoch 7 accuracy: 0.9018 val_accuracy: 0.9204\nEpoch 8 accuracy: 0.9017 val_accuracy: 0.9191\nEpoch 9 accuracy: 0.9035 val_accuracy: 0.9189\nEpoch 10 accuracy: 0.9036 val_accuracy: 0.9203\nEpoch 11 accuracy: 0.9036 val_accuracy: 0.9198\nEpoch 12 accuracy: 0.9048 val_accuracy: 0.9208\nEpoch 13 accuracy: 0.9054 val_accuracy: 0.9202\nEpoch 14 accuracy: 0.9062 val_accuracy: 0.9200\nEpoch 15 accuracy: 0.9068 val_accuracy: 0.9217\n([tensor(0.8792, device='cuda:0'), tensor(0.8880, device='cuda:0'), tensor(0.8929, device='cuda:0'), tensor(0.8963, device='cuda:0'), tensor(0.8973, device='cuda:0'), tensor(0.8995, device='cuda:0'), tensor(0.9018, device='cuda:0'), tensor(0.9017, device='cuda:0'), tensor(0.9035, device='cuda:0'), tensor(0.9036, device='cuda:0'), tensor(0.9036, device='cuda:0'), tensor(0.9048, device='cuda:0'), tensor(0.9054, device='cuda:0'), tensor(0.9062, device='cuda:0'), tensor(0.9068, device='cuda:0')], [tensor(0.8999, device='cuda:0'), tensor(0.9079, device='cuda:0'), tensor(0.9114, device='cuda:0'), tensor(0.9157, device='cuda:0'), tensor(0.9176, device='cuda:0'), tensor(0.9169, device='cuda:0'), tensor(0.9204, device='cuda:0'), tensor(0.9191, device='cuda:0'), tensor(0.9189, device='cuda:0'), tensor(0.9203, device='cuda:0'), tensor(0.9198, device='cuda:0'), tensor(0.9208, device='cuda:0'), tensor(0.9202, device='cuda:0'), tensor(0.9200, device='cuda:0'), tensor(0.9217, device='cuda:0')])\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"accuracy_test = 0\nmodel.eval()\nwith torch.no_grad():\n    for x_batch, y_batch in test_dl:\n        y_batch = y_batch.to(device)\n        pred = model(x_batch.to(device))[:, 0]\n        is_correct = ((pred>=0.5).float() == y_batch).float()\n        accuracy_test += is_correct.sum()\naccuracy_test /= len(test_dl.dataset)\nprint(f'Test accuracy: {accuracy_test:.4f}')\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T17:14:54.931637Z","iopub.execute_input":"2025-10-02T17:14:54.932369Z","iopub.status.idle":"2025-10-02T17:15:13.356990Z","shell.execute_reply.started":"2025-10-02T17:14:54.932336Z","shell.execute_reply":"2025-10-02T17:15:13.356332Z"}},"outputs":[{"name":"stdout","text":"Test accuracy: 0.9221\n","output_type":"stream"}],"execution_count":48}]}