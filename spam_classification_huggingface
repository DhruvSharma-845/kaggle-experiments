{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-07T12:32:15.294918Z","iopub.execute_input":"2025-06-07T12:32:15.295712Z","iopub.status.idle":"2025-06-07T12:32:15.568703Z","shell.execute_reply.started":"2025-06-07T12:32:15.295681Z","shell.execute_reply":"2025-06-07T12:32:15.567992Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"from pathlib import Path\n\nworking_dir = '/kaggle/working/'\n\ndataset_url = \"https://archive.ics.uci.edu/static/public/228/sms+spam+collection.zip\"\nzip_path = Path(working_dir) / 'spam_collection.zip'\nextracted_path = Path(working_dir) / 'sms_spam_collection'\ndata_file_path = Path(extracted_path) / \"SMSSpamCollection.tsv\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T13:48:05.595649Z","iopub.execute_input":"2025-06-07T13:48:05.595948Z","iopub.status.idle":"2025-06-07T13:48:05.603056Z","shell.execute_reply.started":"2025-06-07T13:48:05.595924Z","shell.execute_reply":"2025-06-07T13:48:05.602499Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"import urllib.request\nimport os\nfrom zipfile import ZipFile\n\ndef download_and_unzip_dataset(url):\n    \n    with urllib.request.urlopen(url) as in_file:\n        with open(zip_path, \"wb\") as out_file:\n            out_file.write(in_file.read())\n\n    with ZipFile(zip_path, 'r') as zip_ref:\n        zip_ref.extractall(extracted_path)\n\n    original_file_path = Path(extracted_path) / \"SMSSpamCollection\"\n    os.rename(original_file_path, data_file_path)\n\ndownload_and_unzip_dataset(dataset_url)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T13:48:09.104564Z","iopub.execute_input":"2025-06-07T13:48:09.104841Z","iopub.status.idle":"2025-06-07T13:48:09.344519Z","shell.execute_reply.started":"2025-06-07T13:48:09.104791Z","shell.execute_reply":"2025-06-07T13:48:09.344025Z"}},"outputs":[],"execution_count":2},{"cell_type":"code","source":"from datasets import load_dataset\n\nspam_dataset = load_dataset(\"csv\", data_files=str(data_file_path), sep=\"\\t\", names=[\"label\", \"text\"])\nprint(spam_dataset)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:05.890791Z","iopub.execute_input":"2025-06-07T14:23:05.891106Z","iopub.status.idle":"2025-06-07T14:23:06.154388Z","shell.execute_reply.started":"2025-06-07T14:23:05.891084Z","shell.execute_reply":"2025-06-07T14:23:06.153850Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Generating train split: 0 examples [00:00, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2c760c44ecdd4dfd82bcbb6b4324a82c"}},"metadata":{}},{"name":"stdout","text":"DatasetDict({\n    train: Dataset({\n        features: ['label', 'text'],\n        num_rows: 5572\n    })\n})\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"print(spam_dataset[\"train\"][:2])\nprint(spam_dataset[\"train\"].features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:09.155331Z","iopub.execute_input":"2025-06-07T14:23:09.155908Z","iopub.status.idle":"2025-06-07T14:23:09.160202Z","shell.execute_reply.started":"2025-06-07T14:23:09.155888Z","shell.execute_reply":"2025-06-07T14:23:09.159638Z"}},"outputs":[{"name":"stdout","text":"{'label': ['ham', 'ham'], 'text': ['Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...', 'Ok lar... Joking wif u oni...']}\n{'label': Value(dtype='string', id=None), 'text': Value(dtype='string', id=None)}\n","output_type":"stream"}],"execution_count":35},{"cell_type":"code","source":"from datasets import Features, Value, ClassLabel\n\nfeatures = Features({\n    \"label\": ClassLabel(names=[\"ham\", \"spam\"]),\n    \"text\": Value(dtype='string', id=None)\n})\nspam_dataset = spam_dataset.cast(features)\nprint(spam_dataset[\"train\"][:2])\nprint(spam_dataset[\"train\"].features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:11.391063Z","iopub.execute_input":"2025-06-07T14:23:11.391565Z","iopub.status.idle":"2025-06-07T14:23:11.427413Z","shell.execute_reply.started":"2025-06-07T14:23:11.391540Z","shell.execute_reply":"2025-06-07T14:23:11.426685Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Casting the dataset:   0%|          | 0/5572 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"78f05e8c702e43c0935bfb5348f3bcc0"}},"metadata":{}},{"name":"stdout","text":"{'label': [0, 0], 'text': ['Go until jurong point, crazy.. Available only in bugis n great world la e buffet... Cine there got amore wat...', 'Ok lar... Joking wif u oni...']}\n{'label': ClassLabel(names=['ham', 'spam'], id=None), 'text': Value(dtype='string', id=None)}\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"from datasets import DatasetDict\n\nspam_dataset_train_test = spam_dataset['train'].train_test_split(test_size=0.2, seed=42)\nspam_dataset_valid_test = spam_dataset_train_test['test'].train_test_split(test_size=0.5, seed=42)\n\n\nspam_ds = DatasetDict({\n    'train': spam_dataset_train_test['train'],\n    'valid': spam_dataset_valid_test['train'],\n    'test': spam_dataset_valid_test['test']\n})\n\nprint(spam_ds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:18.700568Z","iopub.execute_input":"2025-06-07T14:23:18.701147Z","iopub.status.idle":"2025-06-07T14:23:18.721157Z","shell.execute_reply.started":"2025-06-07T14:23:18.701124Z","shell.execute_reply":"2025-06-07T14:23:18.720454Z"}},"outputs":[{"name":"stdout","text":"DatasetDict({\n    train: Dataset({\n        features: ['label', 'text'],\n        num_rows: 4457\n    })\n    valid: Dataset({\n        features: ['label', 'text'],\n        num_rows: 557\n    })\n    test: Dataset({\n        features: ['label', 'text'],\n        num_rows: 558\n    })\n})\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"print(spam_ds[\"train\"][:2])\nprint(spam_ds[\"valid\"][:2])\nprint(spam_ds[\"test\"][:2])\nprint(spam_ds[\"train\"].features['label'].int2str(spam_ds[\"train\"][0][\"label\"]))\nprint(spam_ds[\"train\"].features['label'].int2str(spam_ds[\"train\"][1][\"label\"]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:34.666976Z","iopub.execute_input":"2025-06-07T14:23:34.667538Z","iopub.status.idle":"2025-06-07T14:23:34.673998Z","shell.execute_reply.started":"2025-06-07T14:23:34.667515Z","shell.execute_reply":"2025-06-07T14:23:34.673288Z"}},"outputs":[{"name":"stdout","text":"{'label': [1, 0], 'text': ['Great News! Call FREEFONE 08006344447 to claim your guaranteed £1000 CASH or £2000 gift. Speak to a live operator NOW!', 'Buy one egg for me da..please:)']}\n{'label': [1, 0], 'text': ['This is the 2nd time we have tried to contact u. U have won the £400 prize. 2 claim is easy, just call 087104711148 NOW! Only 10p per minute. BT-national-rate', 'Wat time ü finish?']}\n{'label': [0, 1], 'text': [\"Tell them the drug dealer's getting impatient\", 'Fancy a shag? I do.Interested? sextextuk.com txt XXUK SUZY to 69876. Txts cost 1.50 per msg. TnCs on website. X']}\nspam\nham\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"from transformers import AutoTokenizer\n\nmodel_ckpt = \"distilbert-base-uncased\"\ntokenizer = AutoTokenizer.from_pretrained(model_ckpt)\nprint(tokenizer.vocab_size)\nprint(tokenizer.model_max_length)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:38.564400Z","iopub.execute_input":"2025-06-07T14:23:38.564680Z","iopub.status.idle":"2025-06-07T14:23:38.747574Z","shell.execute_reply.started":"2025-06-07T14:23:38.564661Z","shell.execute_reply":"2025-06-07T14:23:38.746967Z"}},"outputs":[{"name":"stderr","text":"loading configuration file config.json from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/config.json\nModel config DistilBertConfig {\n  \"activation\": \"gelu\",\n  \"architectures\": [\n    \"DistilBertForMaskedLM\"\n  ],\n  \"attention_dropout\": 0.1,\n  \"dim\": 768,\n  \"dropout\": 0.1,\n  \"hidden_dim\": 3072,\n  \"initializer_range\": 0.02,\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"distilbert\",\n  \"n_heads\": 12,\n  \"n_layers\": 6,\n  \"pad_token_id\": 0,\n  \"qa_dropout\": 0.1,\n  \"seq_classif_dropout\": 0.2,\n  \"sinusoidal_pos_embds\": false,\n  \"tie_weights_\": true,\n  \"transformers_version\": \"4.51.3\",\n  \"vocab_size\": 30522\n}\n\nloading file vocab.txt from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/vocab.txt\nloading file tokenizer.json from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/tokenizer.json\nloading file added_tokens.json from cache at None\nloading file special_tokens_map.json from cache at None\nloading file tokenizer_config.json from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/tokenizer_config.json\nloading file chat_template.jinja from cache at None\nloading configuration file config.json from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/config.json\nModel config DistilBertConfig {\n  \"activation\": \"gelu\",\n  \"architectures\": [\n    \"DistilBertForMaskedLM\"\n  ],\n  \"attention_dropout\": 0.1,\n  \"dim\": 768,\n  \"dropout\": 0.1,\n  \"hidden_dim\": 3072,\n  \"initializer_range\": 0.02,\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"distilbert\",\n  \"n_heads\": 12,\n  \"n_layers\": 6,\n  \"pad_token_id\": 0,\n  \"qa_dropout\": 0.1,\n  \"seq_classif_dropout\": 0.2,\n  \"sinusoidal_pos_embds\": false,\n  \"tie_weights_\": true,\n  \"transformers_version\": \"4.51.3\",\n  \"vocab_size\": 30522\n}\n\n","output_type":"stream"},{"name":"stdout","text":"30522\n512\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"train_ds = spam_ds[\"train\"]\nvalid_ds = spam_ds[\"valid\"]\ntest_ds = spam_ds[\"test\"]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:45.512875Z","iopub.execute_input":"2025-06-07T14:23:45.513541Z","iopub.status.idle":"2025-06-07T14:23:45.517571Z","shell.execute_reply.started":"2025-06-07T14:23:45.513522Z","shell.execute_reply":"2025-06-07T14:23:45.516922Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"def tokenize(batch):\n    return tokenizer(batch[\"text\"], padding=True, truncation=True)\n\nspam_ds_encoded = spam_ds.map(tokenize, batched=True, batch_size=None)\nprint(spam_ds_encoded['train'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:47.612900Z","iopub.execute_input":"2025-06-07T14:23:47.613487Z","iopub.status.idle":"2025-06-07T14:23:48.460746Z","shell.execute_reply.started":"2025-06-07T14:23:47.613465Z","shell.execute_reply":"2025-06-07T14:23:48.459943Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/4457 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a60852fbfdb6449b9a30fbf2f70d330e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/557 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"86cbfecc62f64b77a435632022098ee7"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Map:   0%|          | 0/558 [00:00<?, ? examples/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bdd605ada1b34e60b483179abc7f206f"}},"metadata":{}},{"name":"stdout","text":"Dataset({\n    features: ['label', 'text', 'input_ids', 'attention_mask'],\n    num_rows: 4457\n})\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"print(spam_ds_encoded['train'][:2])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:23:55.973663Z","iopub.execute_input":"2025-06-07T14:23:55.974227Z","iopub.status.idle":"2025-06-07T14:23:55.980160Z","shell.execute_reply.started":"2025-06-07T14:23:55.974204Z","shell.execute_reply":"2025-06-07T14:23:55.979491Z"}},"outputs":[{"name":"stdout","text":"{'label': [1, 0], 'text': ['Great News! Call FREEFONE 08006344447 to claim your guaranteed £1000 CASH or £2000 gift. Speak to a live operator NOW!', 'Buy one egg for me da..please:)'], 'input_ids': [[101, 2307, 2739, 999, 2655, 2489, 14876, 2638, 5511, 8889, 2575, 22022, 22932, 22610, 2000, 4366, 2115, 12361, 27708, 2692, 5356, 2030, 21853, 8889, 2692, 5592, 1012, 3713, 2000, 1037, 2444, 6872, 2085, 999, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [101, 4965, 2028, 8288, 2005, 2033, 4830, 1012, 1012, 3531, 1024, 1007, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 'attention_mask': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]}\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"import torch\nfrom transformers import AutoModelForSequenceClassification\n\nmodel_ckpt = \"distilbert-base-uncased\"\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\nnum_labels = 2\nmodel = AutoModelForSequenceClassification.from_pretrained(model_ckpt, num_labels=num_labels).to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:24:01.551722Z","iopub.execute_input":"2025-06-07T14:24:01.552008Z","iopub.status.idle":"2025-06-07T14:24:01.808358Z","shell.execute_reply.started":"2025-06-07T14:24:01.551990Z","shell.execute_reply":"2025-06-07T14:24:01.807737Z"}},"outputs":[{"name":"stderr","text":"loading configuration file config.json from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/config.json\nModel config DistilBertConfig {\n  \"activation\": \"gelu\",\n  \"architectures\": [\n    \"DistilBertForMaskedLM\"\n  ],\n  \"attention_dropout\": 0.1,\n  \"dim\": 768,\n  \"dropout\": 0.1,\n  \"hidden_dim\": 3072,\n  \"initializer_range\": 0.02,\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"distilbert\",\n  \"n_heads\": 12,\n  \"n_layers\": 6,\n  \"pad_token_id\": 0,\n  \"qa_dropout\": 0.1,\n  \"seq_classif_dropout\": 0.2,\n  \"sinusoidal_pos_embds\": false,\n  \"tie_weights_\": true,\n  \"transformers_version\": \"4.51.3\",\n  \"vocab_size\": 30522\n}\n\nloading weights file model.safetensors from cache at /root/.cache/huggingface/hub/models--distilbert-base-uncased/snapshots/12040accade4e8a0f71eabdb258fecc2e7e948be/model.safetensors\nSome weights of the model checkpoint at distilbert-base-uncased were not used when initializing DistilBertForSequenceClassification: ['vocab_layer_norm.bias', 'vocab_layer_norm.weight', 'vocab_projector.bias', 'vocab_transform.bias', 'vocab_transform.weight']\n- This IS expected if you are initializing DistilBertForSequenceClassification from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n- This IS NOT expected if you are initializing DistilBertForSequenceClassification from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\nSome weights of DistilBertForSequenceClassification were not initialized from the model checkpoint at distilbert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight', 'pre_classifier.bias', 'pre_classifier.weight']\nYou should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, f1_score\n\ndef compute_metrics(pred):\n    labels = pred.label_ids\n    preds = pred.predictions.argmax(-1)\n    f1 = f1_score(labels, preds, average=\"weighted\")\n    acc = accuracy_score(labels, preds)\n    return {\"accuracy\": acc, \"f1\": f1}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:24:07.202467Z","iopub.execute_input":"2025-06-07T14:24:07.203063Z","iopub.status.idle":"2025-06-07T14:24:07.207068Z","shell.execute_reply.started":"2025-06-07T14:24:07.203041Z","shell.execute_reply":"2025-06-07T14:24:07.206303Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"#spam_ds_encoded.set_format(\"torch\", columns=[\"input_ids\", \"attention_mask\", \"Label\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T12:32:46.939610Z","iopub.execute_input":"2025-06-07T12:32:46.939893Z","iopub.status.idle":"2025-06-07T12:32:47.003225Z","shell.execute_reply.started":"2025-06-07T12:32:46.939869Z","shell.execute_reply":"2025-06-07T12:32:47.002512Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"from huggingface_hub import notebook_login\n\nnotebook_login()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T13:49:22.486945Z","iopub.execute_input":"2025-06-07T13:49:22.487521Z","iopub.status.idle":"2025-06-07T13:49:22.507552Z","shell.execute_reply.started":"2025-06-07T13:49:22.487499Z","shell.execute_reply":"2025-06-07T13:49:22.506787Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"VBox(children=(HTML(value='<center> <img\\nsrc=https://huggingface.co/front/assets/huggingface_logo-noborder.sv…","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"00072d9a9bb74fee969869d443036bff"}},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"from transformers import Trainer, TrainingArguments\n\nbatch_size = 32\nlogging_steps = len(spam_ds_encoded[\"train\"]) // batch_size\nmodel_name = f\"{model_ckpt}-finetuned-spam\"\ntraining_args = TrainingArguments(output_dir=model_name, num_train_epochs=2, learning_rate=2e-5,\n                                  per_device_train_batch_size=batch_size,\n                                  per_device_eval_batch_size=batch_size,\n                                  weight_decay=0.01, eval_strategy=\"epoch\",\n                                  disable_tqdm=False, logging_steps=logging_steps, push_to_hub=True,\n                                  log_level=\"debug\", report_to=\"none\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:24:14.260322Z","iopub.execute_input":"2025-06-07T14:24:14.261049Z","iopub.status.idle":"2025-06-07T14:24:14.289336Z","shell.execute_reply.started":"2025-06-07T14:24:14.261026Z","shell.execute_reply":"2025-06-07T14:24:14.288817Z"}},"outputs":[{"name":"stderr","text":"PyTorch: setting up devices\n","output_type":"stream"}],"execution_count":46},{"cell_type":"code","source":"from transformers import Trainer\n\ntrainer = Trainer(model=model, args=training_args,\n                  compute_metrics=compute_metrics,\n                  train_dataset=spam_ds_encoded[\"train\"],\n                  eval_dataset=spam_ds_encoded[\"valid\"],\n                  tokenizer=tokenizer)\ntrainer.train()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:24:17.908882Z","iopub.execute_input":"2025-06-07T14:24:17.909190Z","iopub.status.idle":"2025-06-07T14:26:31.717196Z","shell.execute_reply.started":"2025-06-07T14:24:17.909174Z","shell.execute_reply":"2025-06-07T14:26:31.716617Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_35/302919555.py:3: FutureWarning: `tokenizer` is deprecated and will be removed in version 5.0.0 for `Trainer.__init__`. Use `processing_class` instead.\n  trainer = Trainer(model=model, args=training_args,\nCurrently training with a batch size of: 32\nThe following columns in the training set don't have a corresponding argument in `DistilBertForSequenceClassification.forward` and have been ignored: text. If text are not expected by `DistilBertForSequenceClassification.forward`,  you can safely ignore this message.\n***** Running training *****\n  Num examples = 4,457\n  Num Epochs = 2\n  Instantaneous batch size per device = 32\n  Total train batch size (w. parallel, distributed & accumulation) = 32\n  Gradient Accumulation steps = 1\n  Total optimization steps = 280\n  Number of trainable parameters = 66,955,010\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"\n    <div>\n      \n      <progress value='280' max='280' style='width:300px; height:20px; vertical-align: middle;'></progress>\n      [280/280 02:00, Epoch 2/2]\n    </div>\n    <table border=\"1\" class=\"dataframe\">\n  <thead>\n <tr style=\"text-align: left;\">\n      <th>Epoch</th>\n      <th>Training Loss</th>\n      <th>Validation Loss</th>\n      <th>Accuracy</th>\n      <th>F1</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>1</td>\n      <td>0.102100</td>\n      <td>0.037124</td>\n      <td>0.989228</td>\n      <td>0.989023</td>\n    </tr>\n    <tr>\n      <td>2</td>\n      <td>0.019700</td>\n      <td>0.034897</td>\n      <td>0.992819</td>\n      <td>0.992775</td>\n    </tr>\n  </tbody>\n</table><p>"},"metadata":{}},{"name":"stderr","text":"The following columns in the evaluation set don't have a corresponding argument in `DistilBertForSequenceClassification.forward` and have been ignored: text. If text are not expected by `DistilBertForSequenceClassification.forward`,  you can safely ignore this message.\n\n***** Running Evaluation *****\n  Num examples = 557\n  Batch size = 32\nSaving model checkpoint to distilbert-base-uncased-finetuned-spam/checkpoint-280\nConfiguration saved in distilbert-base-uncased-finetuned-spam/checkpoint-280/config.json\nModel weights saved in distilbert-base-uncased-finetuned-spam/checkpoint-280/model.safetensors\ntokenizer config file saved in distilbert-base-uncased-finetuned-spam/checkpoint-280/tokenizer_config.json\nSpecial tokens file saved in distilbert-base-uncased-finetuned-spam/checkpoint-280/special_tokens_map.json\ntokenizer config file saved in distilbert-base-uncased-finetuned-spam/tokenizer_config.json\nSpecial tokens file saved in distilbert-base-uncased-finetuned-spam/special_tokens_map.json\nThe following columns in the evaluation set don't have a corresponding argument in `DistilBertForSequenceClassification.forward` and have been ignored: text. If text are not expected by `DistilBertForSequenceClassification.forward`,  you can safely ignore this message.\n\n***** Running Evaluation *****\n  Num examples = 557\n  Batch size = 32\n\n\nTraining completed. Do not forget to share your model on huggingface.co/models =)\n\n\nWaiting for the current checkpoint push to be finished, this might take a couple of minutes.\n","output_type":"stream"},{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"TrainOutput(global_step=280, training_loss=0.061606828229767936, metrics={'train_runtime': 122.1161, 'train_samples_per_second': 72.996, 'train_steps_per_second': 2.293, 'total_flos': 548894189854416.0, 'train_loss': 0.061606828229767936, 'epoch': 2.0})"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"preds_output = trainer.predict(spam_ds_encoded[\"valid\"])\nprint(preds_output.metrics)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:28:26.200502Z","iopub.execute_input":"2025-06-07T14:28:26.200794Z","iopub.status.idle":"2025-06-07T14:28:27.457299Z","shell.execute_reply.started":"2025-06-07T14:28:26.200772Z","shell.execute_reply":"2025-06-07T14:28:27.456543Z"}},"outputs":[{"name":"stderr","text":"The following columns in the test set don't have a corresponding argument in `DistilBertForSequenceClassification.forward` and have been ignored: text. If text are not expected by `DistilBertForSequenceClassification.forward`,  you can safely ignore this message.\n\n***** Running Prediction *****\n  Num examples = 557\n  Batch size = 32\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":""},"metadata":{}},{"name":"stdout","text":"{'test_loss': 0.03489712253212929, 'test_accuracy': 0.992818671454219, 'test_f1': 0.9927747492775749, 'test_runtime': 1.2461, 'test_samples_per_second': 446.978, 'test_steps_per_second': 14.445}\n","output_type":"stream"}],"execution_count":48},{"cell_type":"code","source":"trainer.push_to_hub(commit_message=\"Spam Classification Training completed!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:31:02.869279Z","iopub.execute_input":"2025-06-07T14:31:02.869917Z","iopub.status.idle":"2025-06-07T14:31:06.293927Z","shell.execute_reply.started":"2025-06-07T14:31:02.869895Z","shell.execute_reply":"2025-06-07T14:31:06.293205Z"}},"outputs":[{"name":"stderr","text":"Saving model checkpoint to distilbert-base-uncased-finetuned-spam\nConfiguration saved in distilbert-base-uncased-finetuned-spam/config.json\nModel weights saved in distilbert-base-uncased-finetuned-spam/model.safetensors\ntokenizer config file saved in distilbert-base-uncased-finetuned-spam/tokenizer_config.json\nSpecial tokens file saved in distilbert-base-uncased-finetuned-spam/special_tokens_map.json\nDropping the following result as it does not have all the necessary fields:\n{'task': {'name': 'Text Classification', 'type': 'text-classification'}, 'metrics': [{'name': 'Accuracy', 'type': 'accuracy', 'value': 0.992818671454219}, {'name': 'F1', 'type': 'f1', 'value': 0.9927747492775749}]}\n","output_type":"stream"},{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"CommitInfo(commit_url='https://huggingface.co/DhruvSharma-845/distilbert-base-uncased-finetuned-spam/commit/12b33ae249c7d1bea273d6812347ffa1e376ca12', commit_message='Spam Classification Training completed!', commit_description='', oid='12b33ae249c7d1bea273d6812347ffa1e376ca12', pr_url=None, repo_url=RepoUrl('https://huggingface.co/DhruvSharma-845/distilbert-base-uncased-finetuned-spam', endpoint='https://huggingface.co', repo_type='model', repo_id='DhruvSharma-845/distilbert-base-uncased-finetuned-spam'), pr_revision=None, pr_num=None)"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"from transformers import pipeline\n\n# Change `transformersbook` to your Hub username\nmodel_id = \"DhruvSharma-845/distilbert-base-uncased-finetuned-spam\"\nclassifier = pipeline(\"text-classification\", model=model_id)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:32:52.896006Z","iopub.execute_input":"2025-06-07T14:32:52.896303Z","iopub.status.idle":"2025-06-07T14:32:58.363314Z","shell.execute_reply.started":"2025-06-07T14:32:52.896282Z","shell.execute_reply":"2025-06-07T14:32:58.362513Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/569 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"bfe8f5c8e6c7477ca7b7f22c4abb3efe"}},"metadata":{}},{"name":"stderr","text":"loading configuration file config.json from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/config.json\nModel config DistilBertConfig {\n  \"activation\": \"gelu\",\n  \"architectures\": [\n    \"DistilBertForSequenceClassification\"\n  ],\n  \"attention_dropout\": 0.1,\n  \"dim\": 768,\n  \"dropout\": 0.1,\n  \"hidden_dim\": 3072,\n  \"initializer_range\": 0.02,\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"distilbert\",\n  \"n_heads\": 12,\n  \"n_layers\": 6,\n  \"pad_token_id\": 0,\n  \"problem_type\": \"single_label_classification\",\n  \"qa_dropout\": 0.1,\n  \"seq_classif_dropout\": 0.2,\n  \"sinusoidal_pos_embds\": false,\n  \"tie_weights_\": true,\n  \"torch_dtype\": \"float32\",\n  \"transformers_version\": \"4.51.3\",\n  \"vocab_size\": 30522\n}\n\nloading configuration file config.json from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/config.json\nModel config DistilBertConfig {\n  \"activation\": \"gelu\",\n  \"architectures\": [\n    \"DistilBertForSequenceClassification\"\n  ],\n  \"attention_dropout\": 0.1,\n  \"dim\": 768,\n  \"dropout\": 0.1,\n  \"hidden_dim\": 3072,\n  \"initializer_range\": 0.02,\n  \"max_position_embeddings\": 512,\n  \"model_type\": \"distilbert\",\n  \"n_heads\": 12,\n  \"n_layers\": 6,\n  \"pad_token_id\": 0,\n  \"problem_type\": \"single_label_classification\",\n  \"qa_dropout\": 0.1,\n  \"seq_classif_dropout\": 0.2,\n  \"sinusoidal_pos_embds\": false,\n  \"tie_weights_\": true,\n  \"torch_dtype\": \"float32\",\n  \"transformers_version\": \"4.51.3\",\n  \"vocab_size\": 30522\n}\n\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/268M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b75a0aca41b14d579792bc8ecc0c4050"}},"metadata":{}},{"name":"stderr","text":"loading weights file model.safetensors from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/model.safetensors\nAll model checkpoint weights were used when initializing DistilBertForSequenceClassification.\n\nAll the weights of DistilBertForSequenceClassification were initialized from the model checkpoint at DhruvSharma-845/distilbert-base-uncased-finetuned-spam.\nIf your task is similar to the task the model of the checkpoint was trained on, you can already use DistilBertForSequenceClassification for predictions without further training.\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/1.23k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a9b83eca31df4a86a34e7b59b073ac7c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"4fb21a44aae24f34ad88a0c86e90a3ec"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/712k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"571a60489f204d81800f9790ab698e00"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/125 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"62519ceb12294937ba28736d933f36d4"}},"metadata":{}},{"name":"stderr","text":"loading file vocab.txt from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/vocab.txt\nloading file tokenizer.json from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/tokenizer.json\nloading file added_tokens.json from cache at None\nloading file special_tokens_map.json from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/special_tokens_map.json\nloading file tokenizer_config.json from cache at /root/.cache/huggingface/hub/models--DhruvSharma-845--distilbert-base-uncased-finetuned-spam/snapshots/12b33ae249c7d1bea273d6812347ffa1e376ca12/tokenizer_config.json\nloading file chat_template.jinja from cache at None\nDevice set to use cuda:0\n","output_type":"stream"}],"execution_count":50},{"cell_type":"code","source":"custom_tweet = \"You get a new chance to win CASH! From 2000 dollars\"\npreds = classifier(custom_tweet, return_all_scores=True)\nprint(preds)\nlabels = spam_ds[\"train\"].features[\"label\"].names\nprint(labels)\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\npreds_df = pd.DataFrame(preds[0])\nplt.bar(labels, 100 * preds_df[\"score\"], color='C0')\nplt.title(f'\"{custom_tweet}\"')\nplt.ylabel(\"Class probability (%)\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T14:40:13.580095Z","iopub.execute_input":"2025-06-07T14:40:13.580870Z","iopub.status.idle":"2025-06-07T14:40:13.694118Z","shell.execute_reply.started":"2025-06-07T14:40:13.580840Z","shell.execute_reply":"2025-06-07T14:40:13.693424Z"}},"outputs":[{"name":"stdout","text":"[[{'label': 'LABEL_0', 'score': 0.10569434612989426}, {'label': 'LABEL_1', 'score': 0.8943055868148804}]]\n['ham', 'spam']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":60}]}